FUNCTION I2C_I2HAA_write
	VAR_INPUT
		fd : DINT := -1;
		address : INT;
		values : ARRAY[0..4] OF UINT;
	END_VAR
	VAR
		bus_data : ARRAY[0..63] OF BYTE;
		cnt : USINT;
	END_VAR
	VAR CONSTANT
		num_channels : USINT := 5;
		num_bytes : USINT := 11;
	END_VAR;

	IF fd >= 0 THEN
		System_ioctl(fd := fd, request := I2C_Constants#I2C_SLAVE, data := address, ENO => ENO);
		IF ENO THEN
			bus_data[0] := 0;
			FOR cnt := 0 TO num_channels - 1 BY 1 DO
				bus_data[cnt * 2 + 1] := TO_BYTE(values[cnt] MOD 256);
				bus_data[cnt * 2 + 2] := TO_BYTE(values[cnt] / 256);
			END_FOR;

			ENO := System_write(fd := fd, count := num_bytes, data := bus_data) = num_bytes;
		END_IF;
	ELSE
		ENO := FALSE;
	END_IF;
END_FUNCTION

FUNCTION I2C_I2HAA_write_single
	VAR_INPUT
		fd : DINT := -1;
		address : INT;
		channel : USINT;
		value : UINT;
	END_VAR
	VAR
		bus_data : ARRAY[0..63] OF BYTE;
		checked_value : UINT := 1023;
	END_VAR
	VAR CONSTANT
		num_channels : USINT := 5;
		num_bytes : USINT := 3;
	END_VAR

	IF channel > num_channels - 1 THEN
		ENO := False;
		RETURN;
	END_IF;

	IF value < 1024 THEN
		checked_value := value;
	END_IF;

	IF fd >= 0 THEN
		System_ioctl(fd := fd, request := I2C_Constants#I2C_SLAVE, data := address, ENO => ENO);
		IF ENO THEN
			bus_data[0] := TO_BYTE(channel);
			bus_data[1] := TO_BYTE(checked_value MOD 256);
			bus_data[2] := TO_BYTE(checked_value / 256);
			ENO := System_write(fd := fd, count := num_bytes, data := bus_data) = num_bytes;
		END_IF;
	ELSE
		ENO := FALSE;
	END_IF;
END_FUNCTION